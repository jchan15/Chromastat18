/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chromastat18;

import com.pi4j.gpio.extension.mcp.MCP23017GpioProvider;
import com.pi4j.gpio.extension.mcp.MCP23017Pin;
import com.pi4j.io.gpio.Pin;
import com.pi4j.io.i2c.I2CBus;
import com.pi4j.io.i2c.I2CFactory;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;
import java.awt.Color;
import java.util.HashMap;
import java.util.Map;

/**
 * UI Class of Chromastat 18
 * @author WilliamKwok
 */
public class Chromastat18UI extends javax.swing.JFrame implements ActionListener {
    // Set up a timer for refreshing the graphics
    private final Timer timer = new Timer(16, this); // 16 in ms
    // Uncomment/comment this portion for ACTUAL DEVICE
    // private RgbSensor rgbSensor;
    // private LuxSensor luxSensor;
    private final MCP23017GpioProvider mcpProviderOne ;
    private final MCP23017GpioProvider mcpProviderTwo;
    
    private SyringePump pump1;
    private SyringePump pump2;
    private SyringePump pump3;
    
    
    
    // Uncomment/comment this portion for TESTING
    private DummyRgb colorRead = new DummyRgb();
    private DummyLux luxSensor = new DummyLux();
    

    /**
     * Creates the new GUI, and also invokes the timer to start refreshing.
     */
    public Chromastat18UI() throws IOException, I2CFactory.UnsupportedBusNumberException, InterruptedException {
        initComponents();
        
        
        // Uncomment/comment this portion for ACTUAL DEVICE
        //this.rgbSensor = new RgbSensor();
        //this.luxSensor = new LuxSensor((byte)0x39);
        mcpProviderOne = new MCP23017GpioProvider(I2CBus.BUS_1, 0x20);
        mcpProviderTwo = new MCP23017GpioProvider(I2CBus.BUS_1, 0x21);
        
        this.initPumps();
        
        timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        text1 = new javax.swing.JTextField();
        colorPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        brightnessPanel = new javax.swing.JPanel();
        huePanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        colorStringLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        text1.setText("0");

        colorPanel.setBackground(new java.awt.Color(0, 0, 0));
        colorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        colorPanel.setToolTipText("");

        javax.swing.GroupLayout colorPanelLayout = new javax.swing.GroupLayout(colorPanel);
        colorPanel.setLayout(colorPanelLayout);
        colorPanelLayout.setHorizontalGroup(
            colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 62, Short.MAX_VALUE)
        );
        colorPanelLayout.setVerticalGroup(
            colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 62, Short.MAX_VALUE)
        );

        jLabel1.setText("Color");

        brightnessPanel.setBackground(new java.awt.Color(0, 0, 0));
        brightnessPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        brightnessPanel.setToolTipText("");

        javax.swing.GroupLayout brightnessPanelLayout = new javax.swing.GroupLayout(brightnessPanel);
        brightnessPanel.setLayout(brightnessPanelLayout);
        brightnessPanelLayout.setHorizontalGroup(
            brightnessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 62, Short.MAX_VALUE)
        );
        brightnessPanelLayout.setVerticalGroup(
            brightnessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 62, Short.MAX_VALUE)
        );

        huePanel.setBackground(new java.awt.Color(0, 0, 0));
        huePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        huePanel.setToolTipText("");

        javax.swing.GroupLayout huePanelLayout = new javax.swing.GroupLayout(huePanel);
        huePanel.setLayout(huePanelLayout);
        huePanelLayout.setHorizontalGroup(
            huePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 62, Short.MAX_VALUE)
        );
        huePanelLayout.setVerticalGroup(
            huePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 62, Short.MAX_VALUE)
        );

        jLabel2.setText("Hue");

        jLabel3.setText("Brightness");

        colorStringLabel.setText("colorstring");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(text1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(colorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(huePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(brightnessPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)))
                            .addComponent(colorStringLabel))))
                .addContainerGap(418, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(7, 7, 7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(huePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(brightnessPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorStringLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 348, Short.MAX_VALUE)
                .addComponent(text1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chromastat18UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chromastat18UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chromastat18UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chromastat18UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Chromastat18UI().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Chromastat18UI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (I2CFactory.UnsupportedBusNumberException ex) {
                    Logger.getLogger(Chromastat18UI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Chromastat18UI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    public void initPumps() {
        Map<String, Pin> inarg1 = new HashMap<String, Pin>();
        Map<String, Pin> inarg2 = new HashMap<String, Pin>();
        Map<String, Pin> inarg3 = new HashMap<String, Pin>();
        String[] keys = {"dirPin", "stepPin", "enablePin", "minPin", "maxPin"};
        Pin[] pins1 = {MCP23017Pin.GPIO_A7, MCP23017Pin.GPIO_A6, MCP23017Pin.GPIO_A5, MCP23017Pin.GPIO_B5, MCP23017Pin.GPIO_B1};
        Pin[] pins2 = {MCP23017Pin.GPIO_B0, MCP23017Pin.GPIO_B1, MCP23017Pin.GPIO_B7, MCP23017Pin.GPIO_B4, MCP23017Pin.GPIO_B2};
        Pin[] pins3 = {MCP23017Pin.GPIO_A4, MCP23017Pin.GPIO_A3, MCP23017Pin.GPIO_A2, MCP23017Pin.GPIO_B6, MCP23017Pin.GPIO_B3};
        
        for(int i = 0; i < keys.length; i++) {
            inarg1.put(keys[i], pins1[i]);
            inarg2.put(keys[i], pins2[i]);
            inarg3.put(keys[i], pins3[i]);
        }
        
        

        this.pump1 = new SyringePump();
    }
    
    public void calibrateSyringes() {
        
    }
    
    /**
     * This method is called every few milliseconds, dependent on the
     * timer parameter. 
     * @param e No need to worry about this, the timer calls it automatically. 
     */
    public void actionPerformed(ActionEvent e) {
        try {
            // Count for framerate
            this.text1.setText(String.valueOf(Integer.parseInt(this.text1.getText())+1));
            
            // Get the color's normalized reading from the sensor
            // Change DummyRgb to SensorRgb for actual device
            DummyRgb.ColorReading color;  
            // SensorRgb.ColorReading color;
            color = colorRead.getNormalizedReading();           // CHANGE
            int r = color.getRed();
            int g = color.getGreen();
            int b = color.getBlue();
            int c = color.getClear();
            
            // Set color of color panel and colorStringLabel to rgb string
            Color colorPanelBackground = new Color(r,g,b);
            colorPanel.setBackground(colorPanelBackground);
            colorStringLabel.setText(r + "," + g + "," + b);
            
            // Set hue panel color
            huePanel.setBackground(colorRead.readingToHue(color));
            
            
            
            
        } catch (Exception ex) {
            Logger.getLogger(Chromastat18UI.class.getName()).log(Level.SEVERE,null,ex);
        }
   
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel brightnessPanel;
    private javax.swing.JPanel colorPanel;
    private javax.swing.JPanel colorPanel2;
    private javax.swing.JPanel colorPanel3;
    private javax.swing.JLabel colorStringLabel;
    private javax.swing.JPanel huePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField text1;
    // End of variables declaration//GEN-END:variables
}
